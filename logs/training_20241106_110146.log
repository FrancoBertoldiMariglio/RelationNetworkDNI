2024-11-06 11:01:46,140 - INFO - Configuration:
2024-11-06 11:01:46,140 - INFO - valid_dir: data/valid
2024-11-06 11:01:46,140 - INFO - invalid_dir: data/invalid
2024-11-06 11:01:46,140 - INFO - test_dir_valid: data/test/valid
2024-11-06 11:01:46,140 - INFO - test_dir_invalid: data/test/invalid
2024-11-06 11:01:46,140 - INFO - epochs: 100
2024-11-06 11:01:46,140 - INFO - episodes_per_epoch: 200
2024-11-06 11:01:46,140 - INFO - n_shot: 5
2024-11-06 11:01:46,140 - INFO - n_query: 15
2024-11-06 11:01:46,140 - INFO - learning_rate: 0.001
2024-11-06 11:01:46,140 - INFO - batch_size: 32
2024-11-06 11:01:46,140 - INFO - num_workers: 4
2024-11-06 11:01:46,140 - INFO - save_interval: 5
2024-11-06 11:01:46,140 - INFO - hidden_size: 8
2024-11-06 11:01:46,140 - INFO - dropout: 0.1
2024-11-06 11:01:46,140 - INFO - device: cuda
2024-11-06 11:01:46,140 - INFO - seed: 42
2024-11-06 11:01:46,140 - INFO - resume: None
2024-11-06 11:01:46,140 - INFO - debug: False
2024-11-06 11:01:46,140 - INFO - 
Model Architecture:
2024-11-06 11:01:46,140 - INFO - 
Embedding Network:
2024-11-06 11:01:46,140 - INFO - EmbeddingNet(
  (encoder): Sequential(
    (0): ConvBlock(
      (conv): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1))
      (bn): BatchNorm2d(64, eps=1e-05, momentum=1, affine=True, track_running_stats=True)
      (relu): ReLU()
      (pool): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
    )
    (1): ConvBlock(
      (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1))
      (bn): BatchNorm2d(64, eps=1e-05, momentum=1, affine=True, track_running_stats=True)
      (relu): ReLU()
      (pool): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
    )
    (2): ConvBlock(
      (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (bn): BatchNorm2d(64, eps=1e-05, momentum=1, affine=True, track_running_stats=True)
      (relu): ReLU()
      (pool): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
    )
    (3): ConvBlock(
      (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (bn): BatchNorm2d(64, eps=1e-05, momentum=1, affine=True, track_running_stats=True)
      (relu): ReLU()
      (pool): Identity()
    )
  )
)
2024-11-06 11:01:46,140 - INFO - 
Relation Module:
2024-11-06 11:01:46,140 - INFO - RelationModule(
  (conv_net): Sequential(
    (0): ConvBlock(
      (conv): Conv2d(128, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (bn): BatchNorm2d(64, eps=1e-05, momentum=1, affine=True, track_running_stats=True)
      (relu): ReLU()
      (pool): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
    )
    (1): ConvBlock(
      (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (bn): BatchNorm2d(64, eps=1e-05, momentum=1, affine=True, track_running_stats=True)
      (relu): ReLU()
      (pool): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
    )
  )
  (classifier): Sequential(
    (0): Linear(in_features=256, out_features=8, bias=True)
    (1): ReLU()
    (2): Linear(in_features=8, out_features=1, bias=True)
    (3): Sigmoid()
  )
)
2024-11-06 11:01:46,140 - INFO - Starting training...
2024-11-06 11:01:54,007 - ERROR - An error occurred during training
Traceback (most recent call last):
  File "/home/francobertoldi/Documents/RelationNetworkDNI/main.py", line 559, in main
    trainer.train()
  File "/home/francobertoldi/Documents/RelationNetworkDNI/main.py", line 408, in train
    loss, accuracy = self.train_episode(support_loader, query_loader)
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/francobertoldi/Documents/RelationNetworkDNI/main.py", line 190, in train_episode
    loss = self.criterion(predictions, query_labels.float())
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/francobertoldi/miniconda3/envs/work/lib/python3.12/site-packages/torch/nn/modules/module.py", line 1736, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/francobertoldi/miniconda3/envs/work/lib/python3.12/site-packages/torch/nn/modules/module.py", line 1747, in _call_impl
    return forward_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/francobertoldi/miniconda3/envs/work/lib/python3.12/site-packages/torch/nn/modules/loss.py", line 697, in forward
    return F.binary_cross_entropy(
           ^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/francobertoldi/miniconda3/envs/work/lib/python3.12/site-packages/torch/nn/functional.py", line 3554, in binary_cross_entropy
    return torch._C._nn.binary_cross_entropy(input, target, weight, reduction_enum)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
RuntimeError: torch.nn.functional.binary_cross_entropy and torch.nn.BCELoss are unsafe to autocast.
Many models use a sigmoid layer right before the binary cross entropy layer.
In this case, combine the two layers using torch.nn.functional.binary_cross_entropy_with_logits
or torch.nn.BCEWithLogitsLoss.  binary_cross_entropy_with_logits and BCEWithLogits are
safe to autocast.
2024-11-06 11:01:54,008 - INFO - Saving final checkpoint...
